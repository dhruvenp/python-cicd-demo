name: CI/CD Pipeline for Python Demo

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_IMAGE: dhruvenp/demo-python

jobs:
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🧪 Run tests
      run: |
        echo "Running application tests..."
        python -c "import app; print('✅ App module imported successfully')"
        python -c "from flask import Flask; print('✅ Flask imported successfully')"
        
    - name: 🔐 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 📝 Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=sha,prefix={{branch}}-
          type=raw,value=latest
          
    - name: 🐋 Build and Push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          ${{ env.DOCKER_IMAGE }}:latest
        
    - name: 📋 Image Details
      run: |
        echo "✅ Docker image built and pushed successfully!"
        echo "Image: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}"
        echo "Latest: ${{ env.DOCKER_IMAGE }}:latest"
        
    - name: 💾 Save image tag
      run: echo "${{ github.sha }}" > image-tag.txt
      
    - name: 📤 Upload image tag artifact
      uses: actions/upload-artifact@v4
      with:
        name: image-tag
        path: image-tag.txt

  deploy-to-kubernetes:
    name: Deploy to Minikube
    needs: build-and-push
    runs-on: self-hosted
    
    steps:
    - name: 📥 Download image tag
      uses: actions/download-artifact@v4
      with:
        name: image-tag
        
    - name: 📝 Read image tag
      id: image-tag
      run: echo "TAG=$(cat image-tag.txt)" >> $GITHUB_OUTPUT
      
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Verify kubectl connection
      run: |
        echo "Checking Kubernetes cluster connection..."
        kubectl cluster-info
        kubectl get nodes
        
    - name: ☸️ Apply Kubernetes deployment
      run: kubectl apply -f k8s/deployment.yaml
        
    - name: 🔄 Update deployment image
      run: |
        kubectl set image deployment/python-app \
          python-container=${{ env.DOCKER_IMAGE }}:${{ steps.image-tag.outputs.TAG }} \
          --record
        
    - name: ⏳ Wait for rollout to complete
      run: kubectl rollout status deployment/python-app --timeout=5m
        
    - name: ✅ Verify deployment
      run: |
        echo "Deployment Status:"
        kubectl get deployment python-app
        echo "Pods Status:"
        kubectl get pods -l app=py
        echo "Service Status:"
        kubectl get svc my-nodeport-service
        echo "Recent Events:"
        kubectl get events --sort-by=.metadata.creationTimestamp | tail -10
        
    - name: 🏥 Test application health
      run: |
        MINIKUBE_IP=$(minikube ip)
        echo "Minikube IP: $MINIKUBE_IP"
        for i in {1..5}; do
          if curl -f http://$MINIKUBE_IP:30080/health; then
            echo "✅ Health check passed!"
            break
          else
            echo "Attempt $i failed, retrying..."
            sleep 5
          fi
        done
        
    - name: 📍 Access Information
      run: |
        MINIKUBE_IP=$(minikube ip)
        echo "🎉 Deployment Successful!"
        echo "Access: http://$MINIKUBE_IP:30080"
        echo "Health: http://$MINIKUBE_IP:30080/health"
        echo "App info: http://$MINIKUBE_IP:30080/info"
